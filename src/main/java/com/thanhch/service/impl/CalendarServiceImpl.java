package com.thanhch.service.impl;

import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.Calendar;
import com.google.api.services.calendar.model.*;
import com.thanhch.config.CalendarConfig;
import com.thanhch.request.CalendarRequest;
import com.thanhch.response.CalendarResponse;
import com.thanhch.service.CalendarService;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author thanhch
 * <p>
 * Date: 12/03/2023
 * <p>
 * Class: CalendarServiceImpl
 */
@Service
public class CalendarServiceImpl implements CalendarService {

    @Override
    public CalendarResponse addEvent(CalendarRequest request) throws GeneralSecurityException, IOException {
        try {
            Event event = new Event()
                    .setSummary(request.getNameEvent())
                    .setLocation("Ha Noi")
                    .setDescription(request.getDescription());

            DateTime startDateTime = new DateTime(request.getStartEventTime());
            EventDateTime start = new EventDateTime()
                    .setDateTime(startDateTime)
                    .setTimeZone("Asia/Ho_Chi_Minh");
            event.setStart(start);

            DateTime endDateTime = new DateTime(request.getEndEventTime());
            EventDateTime end = new EventDateTime()
                    .setDateTime(endDateTime)
                    .setTimeZone("Asia/Ho_Chi_Minh");
            event.setEnd(end);

            // Setup if recurrence event
//        String[] recurrence = new String[] {"RRULE:FREQ=DAILY;COUNT=2"};
//        event.setRecurrence(Arrays.asList(recurrence));

            List<EventAttendee> attendees = request.getEmailAttendList().stream().
                    map(e -> new EventAttendee().setEmail(e)).collect(Collectors.toList());
            event.setAttendees(attendees);

            EventReminder[] reminderOverrides = new EventReminder[]{
                    new EventReminder().setMethod("email").setMinutes(24 * 60),
                    new EventReminder().setMethod("popup").setMinutes(10),
            };
            Event.Reminders reminders = new Event.Reminders()
                    .setUseDefault(false)
                    .setOverrides(Arrays.asList(reminderOverrides));
            event.setReminders(reminders);

            String calendarId = "primary";
            Calendar calendar = (new CalendarConfig()).configure();

            createGoogleMeeting(event);

            event = calendar.events().insert(calendarId, event).setConferenceDataVersion(1).execute();

            return CalendarResponse.builder()
                    .eventLink(event.getHtmlLink())
                    .meetingLink(event.getConferenceData().getEntryPoints().get(0).getUri())
                    .status(event.getConferenceData().getCreateRequest().getStatus().getStatusCode())
                    .build();
        } catch (IOException | GeneralSecurityException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void createGoogleMeeting(Event event) {
        ConferenceSolutionKey conferenceSKey = new ConferenceSolutionKey();
        conferenceSKey.setType("hangoutsMeet"); // Non-G suite user
        CreateConferenceRequest createConferenceReq = new CreateConferenceRequest();
        createConferenceReq.setRequestId(java.util.UUID.randomUUID().toString()); // ID generated by you
        createConferenceReq.setConferenceSolutionKey(conferenceSKey);
        ConferenceData conferenceData = new ConferenceData();
        conferenceData.setCreateRequest(createConferenceReq);
        event.setConferenceData(conferenceData);
    }

}
